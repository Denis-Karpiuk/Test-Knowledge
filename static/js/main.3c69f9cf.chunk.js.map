{"version":3,"sources":["components/Result/Result.module.css","assets/failTest.jpg","assets/jobOffer.jpg","assets/start.png","assets/test.jpg","components/Result/Result.js","components/Timer/Timer.js","components/TestKnowledge/Test/Test.js","components/TestKnowledge/TestKnowledgeContainer.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Result","point","totalCount","errors","className","s","results","correctTime","time","String","length","formatTime","minutes","Math","floor","seconds","Timer","takeIsTimeLeft","testNumber","useState","count","setCount","useEffect","timer","setTimeout","clearTimeout","startTest","message","bg","start","sucsessTest","sucsess","failTest","fail","Test","img","totalQuestions","question","answers","takeUserAnswer","testMode","editTestMode","isSucsessTest","changeTimerMode","timerMode","correctAnswer","bacground","testClass","cn","src","alt","name","onClick","map","answer","disabled","TestKnowledgeContainer","data","state","setPoint","setErrors","setTestNumber","isTimeLeft","setIsTimeLeft","setTestMode","setIsSucsessTest","answerUser","setAnswerUser","setTimeMode","allTests","filter","el","type","test","options","correct","totalAnswered","isCorrectAnswer","addError","id","ceil","image","timeLeft","e","target","App","role","testData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c69f9cf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"results\":\"Result_results__342gV\"};","export default __webpack_public_path__ + \"static/media/failTest.05d7fbaa.jpg\";","export default __webpack_public_path__ + \"static/media/jobOffer.3482a1ed.jpg\";","export default __webpack_public_path__ + \"static/media/start.2da7bdea.png\";","export default __webpack_public_path__ + \"static/media/test.7b3b1466.jpg\";","import s from './Result.module.css'\r\n\r\nconst Result = ({ point = 0, totalCount = 0, errors = 0 }) => {\r\n\treturn (\r\n\t\t<div className={s.results}>\r\n\t\t\t<div>{`Sucsess: ${point}`}</div>\r\n\t\t\t<div>{`Errors: ${errors}`}</div>\r\n\t\t\t<div>{`Total count: ${totalCount}`}</div>\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default Result\r\n","import { useEffect, useState } from 'react'\r\n\r\nconst correctTime = time => (String(time).length === 1 ? `0${time}` : `${time}`)\r\nconst formatTime = time => {\r\n\tconst minutes = Math.floor(time / 60)\r\n\tconst seconds = time % 60\r\n\treturn `${correctTime(minutes)}: ${correctTime(seconds)}`\r\n}\r\nconst Timer = ({ seconds, takeIsTimeLeft, testNumber }) => {\r\n\tconst [count, setCount] = useState(seconds)\r\n\tuseEffect(() => {\r\n\t\tlet timer\r\n\t\tif (count > 0) timer = setTimeout(() => setCount(count => count - 1), 1000)\r\n\t\tif (count === 0 || count === 10) takeIsTimeLeft(count)\r\n\t\treturn () => clearTimeout(timer)\r\n\t}, [count])\r\n\tuseEffect(() => {\r\n\t\tsetCount(seconds)\r\n\t}, [testNumber, seconds])\r\n\treturn <div>{count > 0 ? formatTime(count) : 'Time Over'}</div>\r\n}\r\nexport default Timer\r\n","import cn from 'classnames'\r\nimport fail from '../../../assets/failTest.jpg'\r\nimport sucsess from '../../../assets/jobOffer.jpg'\r\nimport start from '../../../assets/start.png'\r\nimport bg from '../../../assets/test.jpg'\r\nimport Result from '../../Result/Result'\r\nimport Timer from '../../Timer/Timer'\r\nimport './Test.css'\r\n\r\nconst results = {\r\n\tstartTest: {\r\n\t\tmessage: 'Click start and test your knowledge!',\r\n\t\tbg: start,\r\n\t},\r\n\tsucsessTest: {\r\n\t\tmessage: 'Welcome to our team!!!',\r\n\t\tbg: sucsess,\r\n\t},\r\n\tfailTest: {\r\n\t\tmessage: `Don't worry next time you will succeed !!!`,\r\n\t\tbg: fail,\r\n\t},\r\n}\r\n\r\nconst Test = ({\r\n\timg,\r\n\ttime,\r\n\tpoint,\r\n\ttotalQuestions,\r\n\tquestion,\r\n\tanswers,\r\n\ttakeIsTimeLeft,\r\n\ttakeUserAnswer,\r\n\ttestMode,\r\n\teditTestMode,\r\n\ttestNumber,\r\n\terrors,\r\n\tisSucsessTest,\r\n\tchangeTimerMode,\r\n\ttimerMode,\r\n\tcorrectAnswer,\r\n}) => {\r\n\tlet bacground = !img ? bg : img\r\n\tlet testClass = cn('test', isSucsessTest)\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{testMode !== 'inProgress' ? (\r\n\t\t\t\t<div className={'test'}>\r\n\t\t\t\t\t<div className={'test__info'}>\r\n\t\t\t\t\t\t<div className={'test__img'}>\r\n\t\t\t\t\t\t\t<img src={results[testMode].bg} alt={'background'} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t{testMode !== 'inProgress' && testMode !== 'startTest' && (\r\n\t\t\t\t\t\t\t<div className={'test__counters'}>\r\n\t\t\t\t\t\t\t\t<div className={'test__result'}>\r\n\t\t\t\t\t\t\t\t\t<Result\r\n\t\t\t\t\t\t\t\t\t\tpoint={point}\r\n\t\t\t\t\t\t\t\t\t\ttotalCount={totalQuestions}\r\n\t\t\t\t\t\t\t\t\t\terrors={errors}\r\n\t\t\t\t\t\t\t\t\t\ttestMode={testMode}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t<div className={'test__message'}>\r\n\t\t\t\t\t\t\t<div>{results[testMode].message}</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div className={cn('button', 'test__start')}>\r\n\t\t\t\t\t\t<button name={'inProgress'} onClick={editTestMode}>\r\n\t\t\t\t\t\t\t{'Start'}\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t) : (\r\n\t\t\t\t<div className={testClass}>\r\n\t\t\t\t\t<div className={'test__info'}>\r\n\t\t\t\t\t\t<div className={'test__img'}>\r\n\t\t\t\t\t\t\t<img src={bacground} alt={'background'} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className={'test__counters'}>\r\n\t\t\t\t\t\t\t<div onClick={changeTimerMode} className={'test__timer'}>\r\n\t\t\t\t\t\t\t\t{timerMode ? (\r\n\t\t\t\t\t\t\t\t\t<Timer\r\n\t\t\t\t\t\t\t\t\t\tseconds={time}\r\n\t\t\t\t\t\t\t\t\t\ttestMode={testMode}\r\n\t\t\t\t\t\t\t\t\t\ttestNumber={testNumber}\r\n\t\t\t\t\t\t\t\t\t\ttakeIsTimeLeft={takeIsTimeLeft}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t'Сlick to start the timer'\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className={'test__result'}>\r\n\t\t\t\t\t\t\t\t<Result\r\n\t\t\t\t\t\t\t\t\tpoint={point}\r\n\t\t\t\t\t\t\t\t\ttotalCount={totalQuestions}\r\n\t\t\t\t\t\t\t\t\terrors={errors}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className={'test__question'}>\r\n\t\t\t\t\t\t\t<div>{question}</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className={'test__answers'}>\r\n\t\t\t\t\t\t{answers.map(answer => (\r\n\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\tkey={answer}\r\n\t\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\t\tanswer === correctAnswer\r\n\t\t\t\t\t\t\t\t\t\t? cn({ correctAnswer: isSucsessTest }, 'button')\r\n\t\t\t\t\t\t\t\t\t\t: 'button'\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\tonClick={takeUserAnswer}\r\n\t\t\t\t\t\t\t\t\tname={answer}\r\n\t\t\t\t\t\t\t\t\tdisabled={!!isSucsessTest}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{answer}\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className={cn('button', 'test__finish')}>\r\n\t\t\t\t\t\t<button name={'startTest'} onClick={editTestMode}>\r\n\t\t\t\t\t\t\t{'Exit'}\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default Test\r\n","import { useEffect, useState } from 'react'\r\nimport Test from './Test/Test'\r\n\r\nconst TestKnowledgeContainer = ({ data }) => {\r\n\tconst [state, setState] = useState(data)\r\n\tconst [point, setPoint] = useState(0)\r\n\tconst [errors, setErrors] = useState(0)\r\n\tconst [testNumber, setTestNumber] = useState(0)\r\n\tconst [isTimeLeft, setIsTimeLeft] = useState(true)\r\n\tconst [testMode, setTestMode] = useState('startTest')\r\n\tconst [isSucsessTest, setIsSucsessTest] = useState('')\r\n\tconst [answerUser, setAnswerUser] = useState('')\r\n\tconst [timerMode, setTimeMode] = useState(true)\r\n\r\n\tconst allTests = state.filter(el => el.type === 'test')\r\n\tconst test = allTests[testNumber]\r\n\tconst totalQuestions = allTests.length\r\n\tconst correctAnswer = test.options[0].correct\r\n\tconst totalAnswered = point + errors\r\n\tconst isCorrectAnswer =\r\n\t\tanswerUser === correctAnswer && totalAnswered < totalQuestions\r\n\r\n\tconst editTestMode = e => setTestMode(e.target.name)\r\n\tconst takeIsTimeLeft = timeLeft => setIsTimeLeft(timeLeft)\r\n\tconst takeUserAnswer = e => setAnswerUser(e.target.name)\r\n\tconst changeTimerMode = () =>\r\n\t\ttimerMode ? setTimeMode(false) : setTimeMode(true)\r\n\tconst addPoint = () => {\r\n\t\tsetPoint(point => point + 1)\r\n\t\tsetIsSucsessTest('test__sucsess')\r\n\t}\r\n\tconst addError = () => {\r\n\t\tsetErrors(errors => errors + 1)\r\n\t\tsetIsSucsessTest('test__error')\r\n\t}\r\n\tconst resultTest = () =>\r\n\t\tpoint < Math.ceil(totalQuestions * 0.7) ? 'failTest' : 'sucsessTest'\r\n\r\n\tconst nextTestNumber = () => {\r\n\t\tif (testNumber < totalQuestions - 1) {\r\n\t\t\tsetTestNumber(testNumber => testNumber + 1)\r\n\t\t\tsetIsSucsessTest()\r\n\t\t\tsetIsTimeLeft(true)\r\n\t\t\tsetAnswerUser('')\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tif (testMode === 'startTest' || testMode === 'inProgress') {\r\n\t\t\tsetTestNumber(0)\r\n\t\t\tsetPoint(0)\r\n\t\t\tsetErrors(0)\r\n\t\t\tsetIsSucsessTest('')\r\n\t\t}\r\n\t}, [testMode])\r\n\r\n\tuseEffect(() => {\r\n\t\tif (answerUser) {\r\n\t\t\tisCorrectAnswer && addPoint()\r\n\t\t\t!isCorrectAnswer && addError()\r\n\t\t}\r\n\t\tif (!isTimeLeft) addError()\r\n\t}, [answerUser, isTimeLeft])\r\n\r\n\tuseEffect(() => {\r\n\t\tlet id\r\n\t\tif (totalAnswered > 0) {\r\n\t\t\tid = setTimeout(() => nextTestNumber(), 1000)\r\n\t\t\tif (totalAnswered === totalQuestions) setTestMode(resultTest())\r\n\t\t}\r\n\t\treturn () => {\r\n\t\t\tclearTimeout(id)\r\n\t\t}\r\n\t}, [point, errors])\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Test\r\n\t\t\t\timg={test.image}\r\n\t\t\t\ttime={60}\r\n\t\t\t\tpoint={point}\r\n\t\t\t\ttotalQuestions={totalQuestions}\r\n\t\t\t\tquestion={test.question}\r\n\t\t\t\tanswers={test.options[1]}\r\n\t\t\t\ttakeIsTimeLeft={takeIsTimeLeft}\r\n\t\t\t\ttakeUserAnswer={takeUserAnswer}\r\n\t\t\t\ttestMode={testMode}\r\n\t\t\t\teditTestMode={editTestMode}\r\n\t\t\t\ttestNumber={testNumber}\r\n\t\t\t\terrors={errors}\r\n\t\t\t\tisSucsessTest={isSucsessTest}\r\n\t\t\t\tchangeTimerMode={changeTimerMode}\r\n\t\t\t\ttimerMode={timerMode}\r\n\t\t\t\tcorrectAnswer={correctAnswer}\r\n\t\t\t\tanswerUser={answerUser}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default TestKnowledgeContainer\r\n","import './App.css'\nimport TestKnowledgeContainer from './components/TestKnowledge/TestKnowledgeContainer'\n//импортируем json файл, который затем передаём в комопнент\nimport testData from './TestData.json'\n\nfunction App() {\n\treturn (\n\t\t<div role={'app'} className='App'>\n\t\t\t<div className={'test1'}>\n\t\t\t\t<TestKnowledgeContainer data={testData} />\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}